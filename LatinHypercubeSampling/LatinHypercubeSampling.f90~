module globals

  implicit none
  save
  integer rank
  integer DaysMax  
  integer daysmosqKao,daysmosqHua,daysmosqTaic,daysmosqTaip
  integer lines
  integer linesHua,linesKao,linesTaic,linesTaip  
  real(8) deltT,kkCC,alphaF
    
  real(8) deltaT
  real(8) Mmax
  real(8) tmaxx
  real(8) TempMin,AltMax,AltMin,kte  
  real(8) betam
  

  real(8) HS,HM,LS,PS,MS
  real(8) ME,MI
  real(8) PeS,PeE,PeI,PeR
  real(8) HSW,HMW,LSW,PSW,MSW
  real(8) MEW,MIW
  real(8) PeSW,PeEW,PeIW,PeRW 


  real(8),dimension(12)::RainMonth
  real(8),allocatable,dimension(:)::Pi,Kml
  real(8),allocatable,dimension(:,:)::coordPoint
  real(8),allocatable,dimension(:,:)::VariancePoint
  real(8),allocatable,dimension(:)::TempMean,TempMinVec,Humidity,Precip
  real(8),allocatable,dimension(:)::TempMeanHua,TempMinVecHua,HumidityHua,PrecipHua
  real(8),allocatable,dimension(:)::TempMeanKao,TempMinVecKao,HumidityKao,PrecipKao
  real(8),allocatable,dimension(:)::TempMeanTaip,TempMinVecTaip,HumidityTaip,PrecipTaip
  real(8),allocatable,dimension(:)::TempMeanTaic,TempMinVecTaic,HumidityTaic,PrecipTaic
  real(8),allocatable,dimension(:)::theta,lambda,HillPrec
  real(8),allocatable,dimension(:)::EvolMosq,EvolEggs,EvolHM,EvolLarv,EvolPup
end module globals


module random
	save
	integer::q1=1,q2=104
	integer ir(670)
	integer::sem(670)

	real(8)::nmax=2*(2**30-1)+1
	real(8) sig
end module random



Program Propagacion
  use globals
  use random

  implicit none
  include 'mpif.h'  !nuevooooo
  integer i,j,ii,jj,kj,rea
  integer AuxE1,Aux00
  integer cluster_number,sc,coord
  real(8) coordAuxX,coordAuxY,coordAuxZ,coordAuxI
  integer Ntarget
  integer Cont,ttt
  integer CubiDev
  integer nalph,nbeta
  integer eleccion,particionx,particiony,particionz,particiona
  integer(8) numbPoints,pointsWaiting,cubitosEnviados

  integer,dimension(1)::PosLoc
  real(8),dimension(1)::ValLoc


  integer, allocatable, dimension(:)::FechaEpid

  real(8) betaMin,betaMax,kMin,kMax,AltMMin,AltMMax,KKMin,KKMax
  real(8) r,T,product,AcumVar
  real(8) Aux1,Aux2,Aux3,Aux4,Aux5,Aux6,Aux7,Aux8,Aux9,Aux10  


  integer STATUS(MPI_STATUS_SIZE),dimDesconocida
  integer size, ierror, tag,tagVero,tagcoord,ERRORCODE
  integer root,ProcPri,ProcUlt,tag1,tag2
  integer ultimoLibre,ProcOcupatosTotal
  integer np,nr
  integer Auxx1
  integer,allocatable, dimension(:)::procesadoresFree,CubitosProcesados,ProcesadorTieneElCubitoNro
  integer,allocatable,dimension(:)::DaysDataKao,DaysDataTaip,DaysDataTaic,DaysDataHua
  real(8),allocatable,dimension(:)::MosqDataKaoh,MosqDataTaip,MosqDataTaic,MosqDataHua
  real(8), dimension(4)::CoordIn
  real(8), dimension(5)::ValorRecibido,ValueSend


  nalph        =1
  nbeta        =1
  deltT        =0.01d0
  tmaxx        =365*4
  AltMin       =0d0




  allocate(EvolMosq(int(tmaxx)+1))
  allocate(EvolHM(int(tmaxx)+1)) 
  allocate(EvolEggs(int(tmaxx)+1),EvolLarv(int(tmaxx)+1),EvolPup(int(tmaxx)+1)) 


  Cont              =0

  linesHua    =0 
  open(1,file="Hualien2010July_2016December.txt")
  do
     read(1,*,end=1)Aux1,Aux2,Aux3,Aux4,Aux5,Aux6
     linesHua   =linesHua+1
  enddo
1 rewind(1)
  DaysMax     =linesHua
  allocate(TempMeanHua(DaysMax),TempMinVecHua(DaysMax),HumidityHua(DaysMax),PrecipHua(DaysMax))
  Aux00        =0
  do i=1,linesHua
     read(1,*)Aux1,Aux2,Aux3,Aux4,Aux5,Aux6
     Aux00            =Aux00+1
     TempMeanHua(Aux00) =Aux1
     TempMinVecHua(Aux00)=Aux3
     HumidityHua(Aux00)   =Aux5
     PrecipHua(Aux00)    =Aux6
  enddo
  close(1)

  linesKao    =0
  open(1,file="Kaohsiung2009July_2016December.txt")
  do
     read(1,*,end=2)Aux1,Aux2,Aux3,Aux4,Aux5,Aux6
     linesKao   =linesKao+1
  enddo
2 rewind(1)
  DaysMax     =linesKao
  allocate(TempMeanKao(DaysMax),TempMinVecKao(DaysMax),HumidityKao(DaysMax),PrecipKao(DaysMax))
  Aux00        =0
  do i=1,linesKao
     read(1,*)Aux1,Aux2,Aux3,Aux4,Aux5,Aux6
     Aux00            =Aux00+1
     TempMeanKao(Aux00) =Aux1
     TempMinVecKao(Aux00)=Aux3
     HumidityKao(Aux00)   =Aux5
     PrecipKao(Aux00)    =Aux6
  enddo
  close(1)

  linesTaic    =0
  open(1,file="Taichung2010July_2016December.txt")
  do
     read(1,*,end=3)Aux1,Aux2,Aux3,Aux4,Aux5,Aux6
     linesTaic   =linesTaic+1
  enddo
3 rewind(1)
  DaysMax     =linesTaic
  allocate(TempMeanTaic(DaysMax),TempMinVecTaic(DaysMax),HumidityTaic(DaysMax),PrecipTaic(DaysMax))
  Aux00        =0
  do i=1,linesTaic
     read(1,*)Aux1,Aux2,Aux3,Aux4,Aux5,Aux6
     Aux00            =Aux00+1
     TempMeanTaic(Aux00) =Aux1
     TempMinVecTaic(Aux00)=Aux3
     HumidityTaic(Aux00)   =Aux5
     PrecipTaic(Aux00)    =Aux6
  enddo
  close(1)


  linesTaip    =0
  open(1,file="Taipei_2009July_2016December.txt")
  do
     read(1,*,end=4)Aux1,Aux2,Aux3,Aux4,Aux5,Aux6
     linesTaip   =linesTaip+1
  enddo
4 rewind(1)
  DaysMax     =linesTaip
  allocate(TempMeanTaip(DaysMax),TempMinVecTaip(DaysMax),HumidityTaip(DaysMax),PrecipTaip(DaysMax))
  Aux00        =0
  do i=1,linesTaip
     read(1,*)Aux1,Aux2,Aux3,Aux4,Aux5,Aux6
     Aux00            =Aux00+1
     TempMeanTaip(Aux00) =Aux1
     TempMinVecTaip(Aux00)=Aux3
     HumidityTaip(Aux00)   =Aux5
     PrecipTaip(Aux00)    =Aux6
  enddo
  close(1)



  daysmosqKao   =0
  open(1,file="WeeklyMosquitoDensityKaohsiung.txt")
  do
     read(1,*,end=5)AuxE1,Aux2
     daysmosqKao     =daysmosqKao+1
  enddo
5 rewind(1)
  allocate(MosqDataKaoh(daysmosqKao))
  allocate(DaysDataKao(daysmosqKao)) 
  do i=1,daysmosqKao
     read(1,*) AuxE1,Aux2
     DaysDataKao(i)  =AuxE1
     MosqDataKaoh(i)  =Aux2
  enddo
  close(1)

  daysmosqTaip   =365*3
  allocate(MosqDataTaip(daysmosqTaip))
  allocate(DaysDataTaip(daysmosqTaip)) 
  MosqDataTaip   =0d0
  do i=1,365*3
     DaysDataTaip(i)   =i+190
  enddo
  daysmosqTaic   =365*2  
  allocate(MosqDataTaic(daysmosqTaic))
  allocate(DaysDataTaic(daysmosqTaic))
  MosqDataTaic   =0d0
  do i=1,365*2
     DaysDataTaic(i)   =i+190
  enddo
    
  daysmosqHua   =365*2
  allocate(MosqDataHua(daysmosqHua))
  allocate(DaysDataHua(daysmosqHua))  
  MosqDataHua   =0d0
  do i=1,365*2
     DaysDataHua(i)   =i+190
  enddo











  tagcoord=1000
  tagVero =1001
  nr        =5     
  np        =2     

  root      =0



  call MPI_INIT(ierror)  !nuevooooo
  call MPI_COMM_SIZE(MPI_COMM_WORLD, size, ierror) !nuevooooo
  call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierror) !nuevooooo


  call initialize_random

  Root0:if(rank==root)then

     betaMin  =0.2d0
     betaMax  =1.5d0
     kMin     =0.0001d0/30d0
     kMax     =0.0020/30d0
     AltMMin  =15d0
     AltMMax  =30d0
     KKMin    =50d0
     KKMax    =400d0


     particionx=2
     particiony=2
     particionz=2
     particiona=2
     numbPoints=particionx*particiony*particionz*particiona

     ProcOcupatosTotal    =0
     ProcPri              =root+1  
     ProcUlt              =size-1
     allocate(procesadoresFree(ProcPri:ProcUlt),CubitosProcesados(numbPoints))
     allocate(ProcesadorTieneElCubitoNro(ProcPri:ProcUlt))
     procesadoresFree   =0
     CubitosProcesados    =0
     ProcesadorTieneElCubitoNro =0
     ultimoLibre          =0
     allocate(coordPoint(numbPoints,4))

     coordPoint =0
     numbPoints=0
     do kj=1,particiona
        do jj=1,particionz
           do j=1,particiony
              do i=1,particionx
                 numbPoints          =numbPoints+1
                 call rand(r)
                 coordAuxX=(betaMax-betaMin)/dble(particionx)*dble(i+r-1)+betaMin
                 call rand(r)
                 coordAuxY=(kMax-kMin)/dble(particiony)*(j+r-1)+kMin
                 call rand(r)
                 coordAuxZ=(AltMMax-AltMMin)/dble(particionz)*(jj+r-1)+AltMMin
                 call rand(r)
                 coordAuxI=(KKMax-KKMin)/dble(particiona)*(kj+r-1)+KKMin
                 coordPoint(numbPoints,1)=coordAuxX
                 coordPoint(numbPoints,2)=coordAuxY
                 coordPoint(numbPoints,3)=coordAuxZ
                 coordPoint(numbPoints,4)=coordAuxI                                  
              enddo
           enddo
        enddo
     enddo
     pointsWaiting     =numbPoints

     allocate(VariancePoint(numbPoints,nr))

     open(1,file='VarianceLHS.dat')
     cubitosEnviados =0
     VariancePoint   =0d0
222  proc1:if(ProcOcupatosTotal<size)then
        do i=ProcPri,ProcUlt
           if(ProcOcupatosTotal==np)exit
           proc12:if(procesadoresFree(i)==0)then
              ultimoLibre=ultimoLibre+1
              if(ultimoLibre>numbPoints)then
                 ultimoLibre=0
                 exit
              endif
              CubitosProcesados(ultimoLibre)=1
              call MPI_Send(coordPoint(ultimoLibre,:),4,MPI_DOUBLE_PRECISION,i,tagcoord,MPI_COMM_WORLD,ierror) !se lo mando al procesador "i"
              cubitosEnviados                  =cubitosEnviados+1
              procesadoresFree(i)            =1
              ProcesadorTieneElCubitoNro(i)  =ultimoLibre
              pointsWaiting                  =pointsWaiting-1
              ProcOcupatosTotal              =ProcOcupatosTotal+1
           endif proc12
        enddo
     endif proc1

223  if(ProcOcupatosTotal>0)then
        call MPI_RECV(ValorRecibido, nr, MPI_DOUBLE_PRECISION, MPI_ANY_SOURCE, tagVero,&
             MPI_COMM_WORLD, STATUS, ierror)
        Auxx1         =STATUS(MPI_SOURCE)
        CubiDev                                       =ProcesadorTieneElCubitoNro(Auxx1)
        VariancePoint(CubiDev,:)                      =ValorRecibido
        ProcesadorTieneElCubitoNro(Auxx1)             =0
        procesadoresFree(Auxx1)                       =0
        ProcOcupatosTotal                             =ProcOcupatosTotal-1
     endif



     
     write(1,*)VariancePoint(CubiDev,1),coordPoint(CubiDev,1),coordPoint(CubiDev,2),coordPoint(CubiDev,3),coordPoint(CubiDev,4)


     if(pointsWaiting>0)then
        goto 222
     endif

     if(pointsWaiting==0.and.ProcOcupatosTotal>0)goto 223

     close(1)
     call MPI_ABORT(MPI_COMM_WORLD, ERRORCODE, ierror)
  endif Root0


  NoRoot:if(rank/=root)then

211  call MPI_RECV(CoordIn,4,MPI_DOUBLE_PRECISION,root,tagcoord,MPI_COMM_WORLD,STATUS,ierror)

  betam          =CoordIn(1)
  kte            =CoordIn(2)
  AltMax         =CoordIn(3)
  kkCC           =CoordIn(4)



  lines          =linesKao


  allocate(TempMean(lines),TempMinVec(lines),Humidity(lines),Precip(lines))
  allocate(theta(0:lines),lambda(0:lines),HillPrec(0:lines))
  allocate(Kml(lines))

  TempMean     =TempMeanKao
  TempMinVec   =TempMinVecKao
  Humidity     =HumidityKao
  Precip       =PrecipKao
  theta        =0d0
  lambda       =0d0
  HillPrec     =0d0
  call CalcPrecip
  call MosqDynamics
  
  AcumVar  =0d0
  do i=1,daysmosqKao
     ttt       =DaysDataKao(i)
     AcumVar   =AcumVar+(sum(EvolMosq(ttt-6:ttt))/7-MosqDataKaoh(i))**2d0
  enddo
    
  deallocate(TempMean,TempMinVec,Humidity,Precip)
  deallocate(Kml,theta,lambda,HillPrec)

  lines          =linesTaip
  allocate(TempMean(lines),TempMinVec(lines),Humidity(lines),Precip(lines))
  allocate(theta(0:lines),lambda(0:lines),HillPrec(0:lines))
  allocate(Kml(lines))

  TempMean     =TempMeanTaip
  TempMinVec   =TempMinVecTaip
  Humidity     =HumidityTaip
  Precip       =PrecipTaip
  theta        =0d0
  lambda       =0d0
  HillPrec     =0d0

  call CalcPrecip
  call MosqDynamics
  
  do i=1,daysmosqTaip
     ttt       =DaysDataTaip(i)
     AcumVar   =AcumVar+(sum(EvolMosq(ttt-6:ttt))/7-MosqDataTaip(i))**2d0
  enddo
  deallocate(TempMean,TempMinVec,Humidity,Precip)
  deallocate(Kml,theta,lambda,HillPrec)


  lines          =linesTaic
  allocate(TempMean(lines),TempMinVec(lines),Humidity(lines),Precip(lines))
  allocate(theta(0:lines),lambda(0:lines),HillPrec(0:lines))
  allocate(Kml(lines))

  TempMean     =TempMeanTaic
  TempMinVec   =TempMinVecTaic
  Humidity     =HumidityTaic
  Precip       =PrecipTaic
  theta        =0d0
  lambda       =0d0
  HillPrec     =0d0

  call CalcPrecip
  call MosqDynamics
  
  do i=1,daysmosqTaic
     ttt       =DaysDataTaic(i)
     AcumVar   =AcumVar+(sum(EvolMosq(ttt-6:ttt))/7-MosqDataTaic(i))**2d0
  enddo
  deallocate(TempMean,TempMinVec,Humidity,Precip)
  deallocate(Kml,theta,lambda,HillPrec)


  lines          =linesHua

  allocate(TempMean(lines),TempMinVec(lines),Humidity(lines),Precip(lines))
  allocate(theta(0:lines),lambda(0:lines),HillPrec(0:lines))
  allocate(Kml(lines))

  TempMean     =TempMeanHua
  TempMinVec   =TempMinVecHua
  Humidity     =HumidityHua
  Precip       =PrecipHua
  theta        =0d0
  lambda       =0d0
  HillPrec     =0d0

  call CalcPrecip
  call MosqDynamics
  
  do i=1,daysmosqHua
     ttt       =DaysDataHua(i)
     AcumVar   =AcumVar+(sum(EvolMosq(ttt-6:ttt))/7-MosqDataHua(i))**2d0
  enddo
  deallocate(TempMean,TempMinVec,Humidity,Precip)
  deallocate(Kml,theta,lambda,HillPrec)

  ValueSend  =AcumVar
  call MPI_Send(ValueSend, nr , MPI_DOUBLE_PRECISION,root,tagVero,MPI_COMM_WORLD,ierror)
  goto 211

  endif NoRoot
  call MPI_FINALIZE(ierror)  !nuevooooo
end Program Propagacion




subroutine MosqDynamics
  use globals

  implicit none
  integer i,j,k
  integer vec
  integer ti
  integer cab,col
  integer pin
  integer flagT1,flagT2
  integer flagInf
  integer tempInt

  real(8) r,sumAD
  real(8) KAux
  real(8) temp
  real(8) Aux01,Aux02
  real(8) ZBQLU01
  real(8) FF,TT
  real(8) lambdaRate
  real(8) mup,mul,muh,mum,madp,madl,madh
  real(8) totpe

  real(8) AuxR1,AuxR2  
  real(8) RG
  real(8) RDe,DHAe,DHHe,T12e
  real(8) RDl,DHAl,DHHl,T12l
  real(8) RDp,DHAp,DHHp,T12p


  EvolMosq  =0
  EvolEggs  =0
  EvolHM    =0
  EvolLarv  =0
  EvolPup   =0



  RDe  =0.24d0
  DHAe =10798d0
  DHHe =100000d0
  T12e =14184d0

  RDl  =0.2088
  DHAl =26018d0
  DHHl =55990d0
  T12l =304.6d0

  RDp  =0.384d0
  DHAp =14931d0
  DHHp =-472379d0
  T12p =148d0

  RG   =1.9872

  !Initial Conditions
  HS      =100
  HM      =100
  LS      =100
  PS      =100
  MS      =100



  temp =1d0


  Mmax =0d0

  flagT1 =1
  flagInf=0
  dynamics:Do while (temp<tmaxx)

     temp    =temp+deltT
     ti      =int(temp) 
     TT      =TempMean(ti)



     madh    =RDe*(TT+273.15)/298d0*exp(DHAe/RG*(1d0/298d0-1d0/(TT+273.15)))/(1d0+exp(DHHe/RG*(1d0/T12e-1d0/(TT+273.15)))) 
     madl    =RDl*(TT+273.15)/298d0*exp(DHAl/RG*(1d0/298d0-1d0/(TT+273.15)))/(1d0+exp(DHHl/RG*(1d0/T12l-1d0/(TT+273.15))))
     if(TT<13.4)then
        madl  =0d0
     endif

     madp    =RDp*(TT+273.15)/298d0*exp(DHAp/RG*(1d0/298d0-1d0/(TT+273.15)))/(1d0+exp(DHHp/RG*(1d0/T12p-1d0/(TT+273.15))))
     muh     =0.011d0
     if(TempMinVec(ti)>10d0)then
        mul     =0.01d0+0.9725*exp(-(TT+273.15-278d0)/2.7035d0)
     else
        mul     =0d0
     endif
     mup     =0.01d0+0.9725*exp(-(TT+273.15-278d0)/2.7035d0)
     mum     =0.091d0 !solari


     if(TT>=11.7d0.and.TT<=37.2)then   
        theta(ti)=(-5.4d0+1.8d0*TT-0.2124d0*TT**2d0+0.01015*TT**3d0-0.0001515*TT**4d0)/8.79537d0
     else
        theta(ti)=0d0
     endif



     if(1d0-LS/Kml(ti)>0d0)then
        KAux   =madh*HM*(1d0-LS/Kml(ti))
     else
        KAux   =0d0
     endif


     HSW = HS+deltT*(betam*theta(ti)*(MS)-muh*HS)
     HMW = HM+deltT*(-muh*HM-KAux)
     LSW = LS+deltT*(KAux-1.5d0*LS*LS/Kml(ti)-madl*LS-mul*LS)
     PSW = PS+deltT*(madl*LS-madp*PS-mup*PS)
     MSW = MS+deltT*(madp*PS-mum*MS) 



     
     if(HSW<0d0)HSW=0d0
     if(HMW<0d0)HMW=0d0
     if(LSW<0d0)LSW=0d0
     if(PSW<0d0)PSW=0d0
     if(MSW<0d0)MSW=0d0           

     HS  =HSW
     HM  =HMW
     LS  =LSW
     PS  =PSW
     MS  =MSW
     ME  =MEW
     MI  =MIW
     PeS =PeSW
     PeE =PeEW
     PeI =PeIW
     PeR =PeRW 

     if(int(temp)>flagT1)then


        tempInt=int(temp)
        if(temp>tmaxx)tempInt=int(tmaxx)


        if(Precip(ti)>0)then
           HM =HM+HS*HillPrec(ti)
           HS =HS-HS*HillPrec(ti)
        endif

        if(TempMinVec(ti)<=10d0)then

           LS =LS-0.50*LS
           PS =PS-0.50*PS
           HM =HM-0.50*HM

        endif

        if(HS<1d0)then
           HS=0d0
        endif
        if(LS<1d0)then
           LS=0d0
        endif
        if(HM<1d0)then
           HM=0d0
        endif
        if(PS<1d0)then
           PS=0d0
        endif
        if(MS<1d0)then
           MS=0d0
        endif

        sumAD   =MS


        if(int(temp)>90)then
           if(Mmax<sumAD) Mmax=sumAD
        endif

        EvolMosq(flagT1+1:tempInt)  =sumAD
        sumAD=0

        sumAD   =sumAD+HS


        EvolEggs(flagT1+1:tempInt)  =sumAD
        sumAD=0


        sumAD   =sumAD+HM


        EvolHM(flagT1+1:tempInt)  =sumAD        
        sumAD=0


        sumAD   =sumAD+LS


        EvolLarv(flagT1+1:tempInt)  =sumAD
        sumAD=0


        sumAD   =sumAD+PS


        EvolPup(flagT1+1:tempInt)   =sumAD         
        flagT1                        =int(temp)
     endif


  enddo dynamics

end subroutine MosqDynamics


subroutine CalcPrecip
  use globals

  implicit none
  integer i,j,k
  integer ddd
  integer Aux01
  integer diasdelmes
  integer diasconlluvia
  integer nro,leee   
  integer PosEleg,DiaElegido,DistDia

  integer, dimension(31)::lista  

  real(8) ZBQLU01,r   
  real(8) Aux02
  real(8) lll,alfF
  real(8) decaim

  real(8), allocatable, dimension(:)::listLluviaFin

  
     lambda            =0d0
     lambda(0)         =AltMin
     HillPrec(0)       =0d0
     Aux01             =1
     Aux02             =0d0
     do i=1,lines
         Aux02   =lambda(Aux01-1)+Precip(i)-kte*(25d0+TempMean(i))**2d0*(100d0-Humidity(i))
             lambda(Aux01)  =Aux02
             if(lambda(Aux01)>AltMax)lambda(Aux01)=AltMax
             if(lambda(Aux01)<AltMin)then
                   lambda(Aux01)=AltMin             
             endif
             Aux01          =Aux01+1       
     enddo
     do i=1,lines
       HillPrec(i)=0.80d0*(Precip(i)/10.0d0)**5d0/(1d0+(Precip(i)/10.0d0)**5d0)
     enddo

     lambda            =lambda/AltMax
     do i=1,lines
        Kml(i)=kkCC*lambda(i)+1d0
     enddo

end subroutine CalcPrecip








!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine initialize_random
  use globals
  use random
  implicit none

  integer i,see(12)
  integer hour
  real r

  CALL SYSTEM_CLOCK(hour)
  hour=hour+rank*1506632
  CALL RANDOM_SEED(put=see)
  CALL RANDOM_SEED(get=see)

  do i=1,670
     call random_number(r)
     sem(i)=r*nmax
     ir(i)=i+1
  enddo
  ir(670)=1
  return
end subroutine initialize_random

!****************************************
subroutine rand(r)
  use globals
  use random
  implicit none
  real(8) r

 1 q1=ir(q1)
  q2=ir(q2)
  sem(q1)= IEOR(sem(q1),sem(q2))
  r=dfloat(sem(q1))/nmax
  if(r==1d0.or.r==0d0) go to 1
  return
end subroutine rand






